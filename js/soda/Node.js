// Generated by CoffeeScript 1.4.0
(function() {
  var Node;

  Node = (function() {

    function Node(ctx, x, y, isFixed, isDraggable, backToDefPosition, radius, color) {
      if (isFixed == null) {
        isFixed = false;
      }
      if (isDraggable == null) {
        isDraggable = false;
      }
      if (backToDefPosition == null) {
        backToDefPosition = false;
      }
      if (radius == null) {
        radius = 5;
      }
      if (color == null) {
        color = '#ff0000';
      }
      this.ctx = ctx;
      this.x = x;
      this.y = y;
      this.defX = x;
      this.defY = y;
      this.fx = 0;
      this.fy = 0;
      this.vx = 0;
      this.vy = 0;
      this.mass = 1;
      this.color = color;
      this.radius = radius;
      this.friction = 0.85;
      this.bounce = 1;
      this.isFixed = isFixed;
      this.isDraggable = isDraggable;
      this.isDragging = false;
      this.backToDefPosition = backToDefPosition;
      this.maxSpeed = 15;
      this.init(false);
    }

    Node.prototype.duplicateNode = function() {
      var newNode;
      newNode = new Node(this.x, this.y, this.isFixed, this.draggable, this.backToDefPosition, this.radius, this.color);
      newNode.vx = this.vx;
      newNode.vy = this.vy;
      newNode.fx = this.fx;
      newNode.fy = this.fy;
      newNode.mass = this.mass;
      newNode.friction = this.friction;
      newNode.bounce = this.bounce;
      return newNode;
    };

    Node.prototype.update = function() {
      var dsq, norm;
      if (this.isFixed) {
        return;
      }
      if (this.isDragging) {
        return;
      }
      this.vx = this.vx * this.friction + this.fx;
      this.vy = this.vy * this.friction + this.fy;
      dsq = this.vx * this.vx + this.vy * this.vy;
      if (this.dsq > this.maxSpeed * this.maxSpeed) {
        norm = Math.sqrt(dsq) / this.maxSpeed;
        this.vx /= norm;
        return this.vy /= norm;
      }
    };

    Node.prototype.rendar = function() {
      var diffX, diffY, ease, minDiff, x, y;
      this.x += this.vx;
      this.y += this.vy;
      if (!this.isFixed && !this.isDragging && this.backToDefPosition) {
        minDiff = 0.125;
        diffX = this.defX - this.x;
        ease = 0.25;
        this.x += diffX * ease;
        if (Math.abs(diffX) < minDiff) {
          x = this.defX;
        }
        diffY = this.defY - this.y;
        this.y += diffY * ease;
        if (Math.abs(diffY) < minDiff) {
          y = this.defY;
        }
      }
      this.ctx.fillStyle = this.color;
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    Node.prototype.setIsDragging = function(bool) {
      return this.isDragging = bool;
    };

    Node.prototype.reset = function() {
      return this.init();
    };

    Node.prototype.init = function() {
      this.ctx.fillStyle = this.color;
      this.ctx.beginPath();
      this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    return Node;

  })();

  if (!window.soda) {
    window.soda = {};
  }

  window.soda.Node = Node;

}).call(this);
