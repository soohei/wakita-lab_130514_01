// Generated by CoffeeScript 1.4.0
(function() {
  var Border;

  jQuery(function($) {
    var border, canvas, ctx;
    canvas = document.getElementById('04_Border_canvas');
    ctx = canvas.getContext('2d');
    return border = new Border(ctx);
  });

  Border = (function() {

    function Border(ctx) {
      var i, isFixed, node, node1, node2, nodeCount, nodePitch, nodeX, nodeY, numNodes, offsetX, ref, spring, _i, _j, _ref, _ref1,
        _this = this;
      this.ctx = ctx;
      this.stageWidth = 960;
      this.stageHeight = 540;
      this.mng = null;
      this.nodeAr = [];
      offsetX = 100;
      nodeX = -offsetX;
      nodeY = 240;
      numNodes = 8;
      nodePitch = (this.stageWidth + offsetX * 2) / (numNodes - 1);
      nodeCount = 0;
      this.mng = new soda.SpringManager(this.ctx);
      for (i = _i = 0, _ref = numNodes - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        isFixed = i === 0 || i === numNodes - 1;
        node = new soda.Node(this.ctx, nodeX, nodeY, isFixed, !isFixed, true, 4, '#ff0000');
        nodeCount++;
        nodeX += nodePitch;
        this.mng.addNode(node);
        this.nodeAr.push(node);
      }
      for (i = _j = 1, _ref1 = this.nodeAr.length - 1; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        node1 = this.nodeAr[i - 1];
        node2 = this.nodeAr[i];
        spring = new soda.Spring(this.ctx, node1, node2, nodePitch, '#333333');
        this.mng.addSpring(spring);
      }
      setInterval(function() {
        return _this.loop();
      }, 33);
      ref = this;
      $('#04_Border_canvas').mousedown(function(e) {
        var mouseX, mouseY, rect;
        rect = e.target.getBoundingClientRect();
        mouseX = e.pageX - rect.left;
        mouseY = e.pageY - rect.top;
        node = ref.mng.closestNodeFromXY(mouseX, mouseY, true);
        if (node) {
          ref.draggingNode = node;
          ref.draggingNode.setIsDragging(true);
          $('#04_Border_canvas').mousemove(function(e) {
            mouseX = e.pageX - rect.left;
            mouseY = e.pageY - rect.top;
            node.x = mouseX;
            return node.y = mouseY;
          });
          return $('#04_Border_canvas').mouseup(function(e) {
            if (ref.draggingNode) {
              ref.draggingNode.setIsDragging(false);
              ref.draggingNode = null;
            }
            $(this).unbind('mousemove');
            return $(this).unbind('mouseup');
          });
        }
      });
    }

    Border.prototype.loop = function() {
      var i, node, p, v, _i, _ref;
      this.ctx.clearRect(0, 0, this.stageWidth, this.stageHeight);
      this.mng.update();
      v = [];
      for (i = _i = 0, _ref = this.nodeAr.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        node = this.nodeAr[i];
        p = {
          x: node.x,
          y: node.y
        };
        v.push(p);
      }
      this.ctx.beginPath();
      this.ctx.moveTo(0, this.stageHeight);
      this.drawSpline(v);
      this.ctx.lineTo(this.stageWidth, this.stageHeight);
      this.ctx.lineTo(0, this.stageHeight);
      this.ctx.closePath();
      return this.ctx.stroke();
    };

    Border.prototype.drawSpline = function(v) {
      var i, numSegments, p0, p1, p2, p3, _i, _ref, _results;
      this.ctx.strokeStyle = '#ccc';
      if (v.length < 2) {
        return;
      }
      v.splice(0, 0, v[0]);
      v.push(v[v.length - 1]);
      numSegments = 25;
      _results = [];
      for (i = _i = 0, _ref = v.length - 3 - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        p0 = v[i];
        p1 = v[i + 1];
        p2 = v[i + 2];
        p3 = v[i + 3];
        _results.push(this.splineTo(p0, p1, p2, p3, numSegments));
      }
      return _results;
    };

    Border.prototype.splineTo = function(p0, p1, p2, p3, numSegments) {
      var i, t, x, y, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = numSegments - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        t = (i + 1) / numSegments;
        x = this.catmullRom(p0.x, p1.x, p2.x, p3.x, t);
        y = this.catmullRom(p0.y, p1.y, p2.y, p3.y, t);
        _results.push(this.ctx.lineTo(x, y));
      }
      return _results;
    };

    Border.prototype.catmullRom = function(p0, p1, p2, p3, t) {
      var v0, v1;
      v0 = (p2 - p0) * 0.5;
      v1 = (p3 - p1) * 0.5;
      return (2 * p1 - 2 * p2 + v0 + v1) * t * t * t + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t * t + v0 * t + p1;
    };

    return Border;

  })();

  if (!window.MY_NAMESPACE) {
    window.MY_NAMESPACE = {};
  }

  window.MY_NAMESPACE.Border = Border;

}).call(this);
